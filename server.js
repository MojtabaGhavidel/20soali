// Generated by CoffeeScript 1.10.0
(function() {
  var BaseModel, CB, Hapi, Words, db, host, port, random, server, value, words,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Hapi = require('hapi');

  server = new Hapi.Server();

  CB = require('couchbase');

  BaseModel = require('odme').CB;

  db = new require('puffer')({
    host: '127.0.0.1',
    name: '20soaliwords'
  });

  random = require("random-js")();

  port = 3000;

  host = 'localhost';

  server.connection({
    host: host,
    port: port
  });

  server.start(function(err) {
    if (err == null) {
      return console.log("Server started listening on localhost:3000...");
    }
  });

  server.register(require('inert'), function(err) {
    if (err) {
      throw err;
      return server.route;
    }
  });

  ({
    method: 'GET',
    path: '/',
    handler: function(request, reply) {
      reply('Hello, world!');
    }
  });

  server.route({
    method: 'GET',
    path: '/',
    handler: function(request, reply) {
      return reply.file('./public/index.html');
    }
  });

  value = random.integer(1, 100);

  console.log(value);


  /*
    server.route({
          method: 'GET',
          path: '/hello',
          handler: function (request, reply) {
              reply.file('./public/hello.html');
          }
      });
  });
   */


  /*
  
  CRUD ADD WORD
   */

  Words = (function(superClass) {
    extend(Words, superClass);

    function Words() {
      return Words.__super__.constructor.apply(this, arguments);
    }

    Words.prototype.source = db;

    return Words;

  })(BaseModel);

  ({
    props: {
      word: true
    }
  });

  words = new Words({
    word: 'Pasta'
  });

  words.create(true).then(function(result) {
    return console.log(result);
  });

}).call(this);
